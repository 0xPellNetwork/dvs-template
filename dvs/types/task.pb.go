// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dvs/types/task.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskResult struct {
	TaskIndex   uint32       `protobuf:"varint,1,opt,name=task_index,json=taskIndex,proto3" json:"task_index,omitempty"`
	TaskRequest *TaskRequest `protobuf:"bytes,2,opt,name=task_request,json=taskRequest,proto3" json:"task_request,omitempty"`
	PutOnChain  bool         `protobuf:"varint,3,opt,name=put_on_chain,json=putOnChain,proto3" json:"put_on_chain,omitempty"`
}

func (m *TaskResult) Reset()         { *m = TaskResult{} }
func (m *TaskResult) String() string { return proto.CompactTextString(m) }
func (*TaskResult) ProtoMessage()    {}
func (*TaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738870263e9ebbb, []int{0}
}
func (m *TaskResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResult.Merge(m, src)
}
func (m *TaskResult) XXX_Size() int {
	return m.Size()
}
func (m *TaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResult proto.InternalMessageInfo

func (m *TaskResult) GetTaskIndex() uint32 {
	if m != nil {
		return m.TaskIndex
	}
	return 0
}

func (m *TaskResult) GetTaskRequest() *TaskRequest {
	if m != nil {
		return m.TaskRequest
	}
	return nil
}

func (m *TaskResult) GetPutOnChain() bool {
	if m != nil {
		return m.PutOnChain
	}
	return false
}

type TaskRequest struct {
	TaskIndex                uint32                `protobuf:"varint,1,opt,name=task_index,json=taskIndex,proto3" json:"task_index,omitempty"`
	Height                   uint32                `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	ChainId                  uint64                `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Squared                  cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=squared,proto3,customtype=cosmossdk.io/math.Int" json:"squared"`
	GroupNumbers             []byte                `protobuf:"bytes,5,opt,name=group_numbers,json=groupNumbers,proto3" json:"group_numbers,omitempty"`
	GroupThresholdPercentage uint32                `protobuf:"varint,6,opt,name=group_threshold_percentage,json=groupThresholdPercentage,proto3" json:"group_threshold_percentage,omitempty"`
}

func (m *TaskRequest) Reset()         { *m = TaskRequest{} }
func (m *TaskRequest) String() string { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()    {}
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2738870263e9ebbb, []int{1}
}
func (m *TaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRequest.Merge(m, src)
}
func (m *TaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRequest proto.InternalMessageInfo

func (m *TaskRequest) GetTaskIndex() uint32 {
	if m != nil {
		return m.TaskIndex
	}
	return 0
}

func (m *TaskRequest) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TaskRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *TaskRequest) GetGroupNumbers() []byte {
	if m != nil {
		return m.GroupNumbers
	}
	return nil
}

func (m *TaskRequest) GetGroupThresholdPercentage() uint32 {
	if m != nil {
		return m.GroupThresholdPercentage
	}
	return 0
}

func init() {
	proto.RegisterType((*TaskResult)(nil), "dvs.types.TaskResult")
	proto.RegisterType((*TaskRequest)(nil), "dvs.types.TaskRequest")
}

func init() { proto.RegisterFile("dvs/types/task.proto", fileDescriptor_2738870263e9ebbb) }

var fileDescriptor_2738870263e9ebbb = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x6f, 0xe2, 0x30,
	0x1c, 0xc5, 0xe3, 0x3b, 0x0e, 0x88, 0x09, 0xc3, 0x59, 0x1c, 0x17, 0x90, 0x08, 0x11, 0x2c, 0x99,
	0x12, 0xdd, 0xdd, 0x70, 0x3a, 0xe9, 0x26, 0x6e, 0x62, 0xb9, 0x56, 0x16, 0x53, 0x97, 0x28, 0x60,
	0x2b, 0x89, 0x20, 0x76, 0x88, 0x1d, 0xd4, 0x7e, 0x83, 0x8e, 0xfd, 0x58, 0x8c, 0x8c, 0x55, 0x07,
	0x54, 0xc1, 0xc7, 0xe8, 0x52, 0xc5, 0x06, 0xda, 0xad, 0x4b, 0x92, 0xf7, 0x7b, 0x2f, 0xfe, 0x3f,
	0xd9, 0x86, 0x1d, 0xb2, 0x11, 0x81, 0xbc, 0xcb, 0xa9, 0x08, 0x64, 0x24, 0x96, 0x7e, 0x5e, 0x70,
	0xc9, 0x91, 0x49, 0x36, 0xc2, 0x57, 0xb4, 0xff, 0x35, 0xca, 0x52, 0xc6, 0x03, 0xf5, 0xd4, 0x6e,
	0xff, 0xfb, 0x82, 0x8b, 0x8c, 0x8b, 0x20, 0x13, 0x71, 0xb0, 0xf9, 0x51, 0xbd, 0x4e, 0x46, 0x4f,
	0x1b, 0xa1, 0x52, 0x81, 0x16, 0x27, 0xab, 0x13, 0xf3, 0x98, 0x6b, 0x5e, 0x7d, 0x69, 0x3a, 0xba,
	0x07, 0x10, 0xce, 0x22, 0xb1, 0xc4, 0x54, 0x94, 0x2b, 0x89, 0x06, 0x10, 0x56, 0x25, 0xc2, 0x94,
	0x11, 0x7a, 0x6b, 0x03, 0x17, 0x78, 0x6d, 0x6c, 0x56, 0x64, 0x5a, 0x01, 0xf4, 0x07, 0x5a, 0xca,
	0x2e, 0xe8, 0xba, 0xa4, 0x42, 0xda, 0x9f, 0x5c, 0xe0, 0xb5, 0x7e, 0x76, 0xfd, 0x4b, 0x59, 0x5f,
	0xaf, 0xa5, 0x5c, 0xdc, 0x92, 0x6f, 0x02, 0xb9, 0xd0, 0xca, 0x4b, 0x19, 0x72, 0x16, 0x2e, 0x92,
	0x28, 0x65, 0xf6, 0x67, 0x17, 0x78, 0x4d, 0x0c, 0xf3, 0x52, 0x5e, 0xb1, 0x7f, 0x15, 0x19, 0xbd,
	0x00, 0xd8, 0x7a, 0xf7, 0xfb, 0x47, 0x5d, 0xba, 0xb0, 0x9e, 0xd0, 0x34, 0x4e, 0x74, 0x8b, 0x36,
	0x3e, 0x29, 0xd4, 0x83, 0x4d, 0x35, 0x21, 0x4c, 0x89, 0x1a, 0x52, 0xc3, 0x0d, 0xa5, 0xa7, 0x04,
	0xfd, 0x86, 0x0d, 0xb1, 0x2e, 0xa3, 0x82, 0x12, 0xbb, 0xe6, 0x02, 0xcf, 0x9c, 0x0c, 0xb6, 0xfb,
	0xa1, 0xf1, 0xb4, 0x1f, 0x7e, 0xd3, 0x3b, 0x25, 0xc8, 0xd2, 0x4f, 0x79, 0x90, 0x45, 0x32, 0xf1,
	0xa7, 0x4c, 0xe2, 0x73, 0x1a, 0x8d, 0x61, 0x3b, 0x2e, 0x78, 0x99, 0x87, 0xac, 0xcc, 0xe6, 0xb4,
	0x10, 0xf6, 0x17, 0x17, 0x78, 0x16, 0xb6, 0x14, 0xfc, 0xaf, 0x19, 0xfa, 0x0b, 0xfb, 0x3a, 0x24,
	0x93, 0x82, 0x8a, 0x84, 0xaf, 0x48, 0x98, 0xd3, 0x62, 0x41, 0x99, 0x8c, 0x62, 0x6a, 0xd7, 0x55,
	0x49, 0x5b, 0x25, 0x66, 0xe7, 0xc0, 0xf5, 0xc5, 0x9f, 0x8c, 0xb7, 0x07, 0x07, 0xec, 0x0e, 0x0e,
	0x78, 0x3e, 0x38, 0xe0, 0xe1, 0xe8, 0x18, 0xbb, 0xa3, 0x63, 0x3c, 0x1e, 0x1d, 0xe3, 0xc6, 0xbc,
	0x5c, 0x90, 0x79, 0x5d, 0x1d, 0xda, 0xaf, 0xd7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xa1, 0x89,
	0xd7, 0x34, 0x02, 0x00, 0x00,
}

func (m *TaskResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PutOnChain {
		i--
		if m.PutOnChain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TaskRequest != nil {
		{
			size, err := m.TaskRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TaskIndex != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupThresholdPercentage != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.GroupThresholdPercentage))
		i--
		dAtA[i] = 0x30
	}
	if len(m.GroupNumbers) > 0 {
		i -= len(m.GroupNumbers)
		copy(dAtA[i:], m.GroupNumbers)
		i = encodeVarintTask(dAtA, i, uint64(len(m.GroupNumbers)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Squared.Size()
		i -= size
		if _, err := m.Squared.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTask(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ChainId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskIndex != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskIndex != 0 {
		n += 1 + sovTask(uint64(m.TaskIndex))
	}
	if m.TaskRequest != nil {
		l = m.TaskRequest.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.PutOnChain {
		n += 2
	}
	return n
}

func (m *TaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskIndex != 0 {
		n += 1 + sovTask(uint64(m.TaskIndex))
	}
	if m.Height != 0 {
		n += 1 + sovTask(uint64(m.Height))
	}
	if m.ChainId != 0 {
		n += 1 + sovTask(uint64(m.ChainId))
	}
	l = m.Squared.Size()
	n += 1 + l + sovTask(uint64(l))
	l = len(m.GroupNumbers)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.GroupThresholdPercentage != 0 {
		n += 1 + sovTask(uint64(m.GroupThresholdPercentage))
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIndex", wireType)
			}
			m.TaskIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskRequest == nil {
				m.TaskRequest = &TaskRequest{}
			}
			if err := m.TaskRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutOnChain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PutOnChain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIndex", wireType)
			}
			m.TaskIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Squared", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Squared.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNumbers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupNumbers = append(m.GroupNumbers[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupNumbers == nil {
				m.GroupNumbers = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupThresholdPercentage", wireType)
			}
			m.GroupThresholdPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupThresholdPercentage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
